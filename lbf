#!/usr/bin/env lua
local argparse=require 'argparse'
local astparser=require 'ast'

local parser=argparse('lbf', "A Lua brainfuck compiler/interpreter")
parser:argument('input', "Input file")
parser:option('-b --backend', "Compiler backend", 'run')
parser:option('-o --output', "Output file", '-')
parser:flag('-O --optimize', "Optimize code", false):args(0)

local args=parser:parse()

local code
do
	local fd, err=io.open(args.input, 'r')
	if not fd then
		error("Failed to open file "..args.input..": "..err)
	end
	code, err=fd:read '*a'
	if not code then
		error("Failed to read file "..args.input..": "..err)
	end
	fd:close()
end

local out
do
	if args.output=='-' then
		out=io.stdout
	else
		local err
		out, err=io.open(args.output, 'wb')
		if not out then
			error("Failed to open file "..args.output..": "..err)
		end
	end
end

local backend
do
	local ok
	ok, backend=pcall(require, 'backends.'..args.backend)
	if not ok then
		error("Backend "..args.backend.." unavailable: "..backend)
	end
end

local ast=astparser.parse(code)

if args.optimize then
	astparser.optimize(ast)
end

do
	local ok, err=out:write(backend(ast))
	if not ok then
		error("Unable to write to file "..args.output..": "..err)
	end
end
out:close()
